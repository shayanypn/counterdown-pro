{"version":3,"sources":["assets/pause.svg","assets/play.svg","components/Form/index.js","components/Timer/index.js","components/Speed/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","onChange","useState","value","setValue","error","setError","handleSubmit","e","time","preventDefault","test","onSubmit","htmlFor","type","name","placeholder","target","onClick","Timer","className","seconds","_minutes","parseInt","_seconds","SPEEDS","second","Speed","active","map","speed","key","Message","middle","Fragment","App","model","setModel","pause","setPause","setSpeed","useEffect","timer","setTimeout","prevStat","clearTimeout","split","i","total_seconds","classes","push","join","timerClassname","src","PlayIcon","PauseIcon","alt","_speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c64231d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pause.3c628b71.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.5b582dfb.svg\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ onChange }) => {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = (e) => {\n    let time = '';\n\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (/^([0-9])?$/.test(value)) {\n      time = `0${value}:00`;\n    }else if (/^([0-5][0-9])?$/.test(value)) {\n      time = `${value}:00`;\n    }else if (/^([0-5][0-9])(:[0-5])?$/.test(value)){\n      time = `${value}0`;\n    }else if (/^([0-5][0-9])(:[0-5][0-9])?$/.test(value)){\n      time = value;\n    }\n\n    if (time !== '') {\n      onChange(time);\n      setValue('');\n      setError(null);\n    } else {\n      setError('time should be in MM:SS format.')\n    }\n  }\n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <fieldset>\n        <label htmlFor=\"countdown\">Countdown:</label>\n        <input\n          type=\"text\"\n          name=\"time\"\n          placeholder=\"(Min)\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n        <button type=\"button\" onClick={handleSubmit}>START</button>\n      </fieldset>\n      {error ? (<p>{error}</p>) : null}\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onChange: PropTypes.func\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Timer = ({ className, seconds }) => {\n\n  seconds = (typeof seconds === 'number' && seconds >= 0) ? seconds : 0;\n  const _minutes = parseInt(seconds / 60, 10);\n  const _seconds = parseInt(seconds % 60, 10);\n\n  return (\n    <div className={`counter ${className}`}>\n      <span>{_minutes < 10 ? '0' + _minutes : _minutes}</span>\n      <span>:</span>\n      <span>{_seconds < 10 ? '0' + _seconds : _seconds}</span>\n    </div>\n  );\n}\n\nTimer.propTypes = {\n  seconds: PropTypes.number,\n  className: PropTypes.string\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SPEEDS = [\n  {\n    second: 1000,\n    name: '1X'\n  },{\n    second: 750,\n    name: '1.5X'\n  },{\n    second: 500,\n    name: '2X'\n  }\n];\n\nconst Speed = ({ onChange, active }) => {\n  return (\n    <>\n      {SPEEDS.map(speed => (<button\n        key={speed.second}\n        className={active === speed.second ? 'active' : ''}\n        onClick={() => onChange(speed.second)}\n      >{speed.name}</button>))}\n    </>\n  );\n}\n\nSpeed.propTypes = {\n  active: PropTypes.number,\n  onChange: PropTypes.func\n};\n\nexport default Speed;\n","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Timer from './components/Timer';\nimport Speed from './components/Speed';\nimport PauseIcon from './assets/pause.svg';\nimport PlayIcon from './assets/play.svg';\n\nconst Message = ({ seconds, middle }) => (\n  <React.Fragment>\n    {(seconds <= middle && (seconds > 0 && middle > 0)) ? <p>More than halfway there!</p> : null}\n    {(seconds === 0 && middle > 0) ? <p>Timeâ€™s up!</p> : null}\n  </React.Fragment>\n);\n\nconst App = () => {\n  const [model, setModel] = useState({\n    seconds: 0,\n    middle: 0\n  });\n  const [pause, setPause] = useState(false);\n  const [speed, setSpeed] = useState(1000);\n\n  const handleStart = (value) => {\n    const [minute, second] = value.split(':').map(i => parseInt(i, 10));\n    const total_seconds = minute * 60 + second;\n    setModel({\n      seconds: total_seconds,\n      middle: parseInt(total_seconds/2, 10)\n    });\n    setPause(false);\n  }\n\n  const timerClassname = () => {\n    const classes = [];\n\n    if (model.seconds <= 10 && model.seconds !== 0 && model.middle > 0) {\n      classes.push('blinking')\n    }\n\n    if (model.seconds <= 20 && model.seconds !== 0 && model.middle > 0) {\n      classes.push('red')      \n    }\n\n    return classes.join(' ');\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (model.seconds > 0 && !pause)\n        setModel(prevStat => ({...prevStat, seconds: (prevStat.seconds-1)}))\n    }, speed);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  }, [model, model.seconds, pause, speed]);\n\n  return (\n    <main>\n      <Form onChange={handleStart} />\n      <section>\n        <Message \n          seconds={model.seconds}\n          middle={model.middle}\n        />\n        <article>\n          <Timer\n            className={timerClassname()} \n            seconds={model.seconds}\n          />\n          <button className=\"btn-pause\" onClick={() => setPause(prevStat => !prevStat)}>\n            <img src={pause ? PlayIcon : PauseIcon} alt=\"pause/resume\" />\n          </button>\n        </article>\n      </section>\n      <footer>\n        <Speed \n          active={speed}\n          onChange={_speed => setSpeed(_speed)}\n        />\n      </footer>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}